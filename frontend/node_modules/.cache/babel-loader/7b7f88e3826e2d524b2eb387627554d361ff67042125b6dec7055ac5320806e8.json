{"ast":null,"code":"var _jsxFileName = \"/Users/het2583/Desktop/eats/frontend/src/contexts/NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotifications = () => {\n  _s();\n  return useContext(NotificationContext);\n};\n_s(useNotifications, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState(() => {\n    // Load from localStorage if available\n    const saved = localStorage.getItem('customer_notifications');\n    return saved ? JSON.parse(saved) : [];\n  });\n  const [unreadCount, setUnreadCount] = useState(0);\n  useEffect(() => {\n    localStorage.setItem('customer_notifications', JSON.stringify(notifications));\n    setUnreadCount(notifications.filter(n => !n.read).length);\n  }, [notifications]);\n  const addNotification = message => {\n    setNotifications(prev => {\n      const newNotif = {\n        id: Date.now(),\n        message,\n        timestamp: new Date().toISOString(),\n        read: false\n      };\n      const updated = [newNotif, ...prev].slice(0, 10);\n      return updated;\n    });\n  };\n  const markAllRead = () => {\n    setNotifications(prev => prev.map(n => ({\n      ...n,\n      read: true\n    })));\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: {\n      notifications,\n      addNotification,\n      unreadCount,\n      markAllRead\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"IIdBbhfWouHxGyZwLi8L83pMiLU=\");\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","NotificationContext","useNotifications","_s","NotificationProvider","children","_s2","notifications","setNotifications","saved","localStorage","getItem","JSON","parse","unreadCount","setUnreadCount","setItem","stringify","filter","n","read","length","addNotification","message","prev","newNotif","id","Date","now","timestamp","toISOString","updated","slice","markAllRead","map","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/het2583/Desktop/eats/frontend/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst NotificationContext = createContext();\n\nexport const useNotifications = () => useContext(NotificationContext);\n\nexport const NotificationProvider = ({ children }) => {\n  const [notifications, setNotifications] = useState(() => {\n    // Load from localStorage if available\n    const saved = localStorage.getItem('customer_notifications');\n    return saved ? JSON.parse(saved) : [];\n  });\n  const [unreadCount, setUnreadCount] = useState(0);\n\n  useEffect(() => {\n    localStorage.setItem('customer_notifications', JSON.stringify(notifications));\n    setUnreadCount(notifications.filter(n => !n.read).length);\n  }, [notifications]);\n\n  const addNotification = (message) => {\n    setNotifications(prev => {\n      const newNotif = {\n        id: Date.now(),\n        message,\n        timestamp: new Date().toISOString(),\n        read: false,\n      };\n      const updated = [newNotif, ...prev].slice(0, 10);\n      return updated;\n    });\n  };\n\n  const markAllRead = () => {\n    setNotifications(prev => prev.map(n => ({ ...n, read: true })));\n  };\n\n  return (\n    <NotificationContext.Provider value={{ notifications, addNotification, unreadCount, markAllRead }}>\n      {children}\n    </NotificationContext.Provider>\n  );\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,mBAAmB,gBAAGN,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMO,gBAAgB,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,mBAAmB,CAAC;AAAA;AAACE,EAAA,CAAzDD,gBAAgB;AAE7B,OAAO,MAAME,oBAAoB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACpD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,MAAM;IACvD;IACA,MAAMY,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,wBAAwB,CAAC;IAC5D,OAAOF,KAAK,GAAGG,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,GAAG,EAAE;EACvC,CAAC,CAAC;EACF,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACdY,YAAY,CAACM,OAAO,CAAC,wBAAwB,EAAEJ,IAAI,CAACK,SAAS,CAACV,aAAa,CAAC,CAAC;IAC7EQ,cAAc,CAACR,aAAa,CAACW,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACC,IAAI,CAAC,CAACC,MAAM,CAAC;EAC3D,CAAC,EAAE,CAACd,aAAa,CAAC,CAAC;EAEnB,MAAMe,eAAe,GAAIC,OAAO,IAAK;IACnCf,gBAAgB,CAACgB,IAAI,IAAI;MACvB,MAAMC,QAAQ,GAAG;QACfC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QACdL,OAAO;QACPM,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC,CAAC;QACnCV,IAAI,EAAE;MACR,CAAC;MACD,MAAMW,OAAO,GAAG,CAACN,QAAQ,EAAE,GAAGD,IAAI,CAAC,CAACQ,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;MAChD,OAAOD,OAAO;IAChB,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,WAAW,GAAGA,CAAA,KAAM;IACxBzB,gBAAgB,CAACgB,IAAI,IAAIA,IAAI,CAACU,GAAG,CAACf,CAAC,KAAK;MAAE,GAAGA,CAAC;MAAEC,IAAI,EAAE;IAAK,CAAC,CAAC,CAAC,CAAC;EACjE,CAAC;EAED,oBACEpB,OAAA,CAACC,mBAAmB,CAACkC,QAAQ;IAACC,KAAK,EAAE;MAAE7B,aAAa;MAAEe,eAAe;MAAER,WAAW;MAAEmB;IAAY,CAAE;IAAA5B,QAAA,EAC/FA;EAAQ;IAAAgC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACmB,CAAC;AAEnC,CAAC;AAAClC,GAAA,CAnCWF,oBAAoB;AAAAqC,EAAA,GAApBrC,oBAAoB;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
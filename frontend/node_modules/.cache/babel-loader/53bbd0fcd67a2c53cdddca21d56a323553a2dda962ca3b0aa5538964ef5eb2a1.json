{"ast":null,"code":"var _jsxFileName = \"/Users/het2583/Desktop/eats/frontend/src/contexts/NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotifications = () => {\n  _s();\n  return useContext(NotificationContext);\n};\n_s(useNotifications, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const user = useSelector(state => state.auth.user);\n  const isAuthenticated = useSelector(state => state.auth.isAuthenticated);\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n\n  // Load notifications for the current user\n  useEffect(() => {\n    if (user && user.id) {\n      const saved = localStorage.getItem(`customer_notifications_${user.id}`);\n      setNotifications(saved ? JSON.parse(saved) : []);\n    } else {\n      setNotifications([]); // No user, clear notifications\n    }\n  }, [user]);\n\n  // Save notifications for the current user\n  useEffect(() => {\n    if (user && user.id) {\n      localStorage.setItem(`customer_notifications_${user.id}`, JSON.stringify(notifications));\n      setUnreadCount(notifications.filter(n => !n.read).length);\n    } else {\n      setUnreadCount(0);\n    }\n  }, [notifications, user]);\n  const addNotification = message => {\n    if (!user || !user.id) return; // Only add if user is logged in\n    setNotifications(prev => {\n      const newNotif = {\n        id: Date.now(),\n        message,\n        timestamp: new Date().toISOString(),\n        read: false\n      };\n      const updated = [newNotif, ...prev].slice(0, 10);\n      return updated;\n    });\n  };\n  const markAllRead = () => {\n    setNotifications(prev => prev.map(n => ({\n      ...n,\n      read: true\n    })));\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: {\n      notifications,\n      addNotification,\n      unreadCount,\n      markAllRead\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"4wV/gp5XVVMW0PAQ0Wrj91buRJw=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useSelector","jsxDEV","_jsxDEV","NotificationContext","useNotifications","_s","NotificationProvider","children","_s2","user","state","auth","isAuthenticated","notifications","setNotifications","unreadCount","setUnreadCount","id","saved","localStorage","getItem","JSON","parse","setItem","stringify","filter","n","read","length","addNotification","message","prev","newNotif","Date","now","timestamp","toISOString","updated","slice","markAllRead","map","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/het2583/Desktop/eats/frontend/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\nconst NotificationContext = createContext();\n\nexport const useNotifications = () => useContext(NotificationContext);\n\nexport const NotificationProvider = ({ children }) => {\n  const user = useSelector((state) => state.auth.user);\n  const isAuthenticated = useSelector((state) => state.auth.isAuthenticated);\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n\n  // Load notifications for the current user\n  useEffect(() => {\n    if (user && user.id) {\n      const saved = localStorage.getItem(`customer_notifications_${user.id}`);\n      setNotifications(saved ? JSON.parse(saved) : []);\n    } else {\n      setNotifications([]); // No user, clear notifications\n    }\n  }, [user]);\n\n  // Save notifications for the current user\n  useEffect(() => {\n    if (user && user.id) {\n      localStorage.setItem(`customer_notifications_${user.id}`, JSON.stringify(notifications));\n      setUnreadCount(notifications.filter(n => !n.read).length);\n    } else {\n      setUnreadCount(0);\n    }\n  }, [notifications, user]);\n\n  const addNotification = (message) => {\n    if (!user || !user.id) return; // Only add if user is logged in\n    setNotifications(prev => {\n      const newNotif = {\n        id: Date.now(),\n        message,\n        timestamp: new Date().toISOString(),\n        read: false,\n      };\n      const updated = [newNotif, ...prev].slice(0, 10);\n      return updated;\n    });\n  };\n\n  const markAllRead = () => {\n    setNotifications(prev => prev.map(n => ({ ...n, read: true })));\n  };\n\n  return (\n    <NotificationContext.Provider value={{ notifications, addNotification, unreadCount, markAllRead }}>\n      {children}\n    </NotificationContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}